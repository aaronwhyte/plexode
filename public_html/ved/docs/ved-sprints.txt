v Hella design work

2011.08.26 - 2011.08.31
Graf op JSON format
v JSON schema for ops
v Op reversal fn
v unit test op reversal

2011.08.31 - 2011.09.04
GrafModel basics
v build from ops
v basic queries
v unit tests

2011.09.24 - 2011.09.25
Graf Paste
v descend through clusters, parts, jacks
v grafModel allocates new IDs
v grafModel.paste(grafModel) returns ID map
v unit tests

Refactor "phy" out of sprite constructors
v Wrap Phy methods/fields in Game:
  v rayscan
  v getSpriteBySledgeId - always follows rayscan... Make it automatic?
  v FRICTION
  v invalidateSledgeForSpriteId
x Pass Game in where needed.
  x act()
  x onSpriteHit()
v Remove Phy from concrete sprite types. Only access Game fields.
v Remove Phy from gaam.Sprite

v Vorp Logic: Part 1
v Logic support in Vorp
v Test level (not using transformer or prefabs)


Transformer 1
v walls
v one-point wall-huggers
  v assembler
  v button
  v grip

2012.03.25 - 2012.07.05
ClipList
Whole cliplist will be one Stor object.
Need a replay strategy that does two things:
1: Preserve op numbers
2: Eliminate obsolete ops
After a replay, the remaining ops should have no redundant information.
v add pubsub to Stor events
... 2012.07.03 resuming ...
v write real cross-tab Stor demo
v write OpStor
  v server-assigned IDs
  v get changes after server ID X
  v test
  v invalidation pubsub
v ClipListOp
  v addClip(timestamp(order), id, grafModelOps)
    v serialize a Graf to a list of ops, which are by nature JSON
  v removeClip(clientOpId)
v Clip
  v (timestamp(order), id, grafModel)
v ClipList
  v list of clips, sorted by timestamp
  v applyOp(clipListOp)
  v basic test

2012.07.20 - 2012.07.28
SysClipList 1
It's a ClipList instance, initialized with static data.
v static SysClipListBuilder.build(json)
v static system data JSON
  v wall
  v assembler
v use it to build a level
  v walls
  v assembler
  v play it
  v grip
  v button
  v play it again

2012.07.28 - 2012.08.12
SysClipList & Transformer: Part II
v SysClips for everything
v Transformer for everything
  v block
  v door
  v zapper
  v beamsensor
  v timer
    v timeout value
  v portal pair
  v exit
    v body
    v URL

2012.08.12 - 2012.08.19
Transformer III: Transform Links
v Remember how links work by looking at level 8
v Add jacks to sys clip models
  v beamsensor
  v button
  v door
  v grip
  v timer
  v zapper
v Populate transformer jackMap when transforming clusters
  v beamsensor
  v button
  v door
  v grip
  v timer
  v zapper
v Make transformer links work
v test in level 9 or so
  v beamsensor
  v button
  v door
  v grip
  v timer
  v zapper

2012.08.19 - 2012.08.19
Transformer IV: Automatic Jacks
v Add jack type and name as data in sys clips, automatically, based on sprite constants.
v Populate transformer jackmap automatically as well.

2012.08.20 - 2012.08.21
v fix link aggregation
  v or
  v and

2012.08.21 - 2012.08.21
v fix some alloc/free GC issues

2012.08.22 - 2012.08.26
LevelEd API I
v levelEd.pasteClip(clip, loc)
v partOrJackId levEd.getNearest(loc, opt_maxDist)
  v parts
  v accessible vector offsets for input + output jacks
v levelEd.setSelected(partOrJackId, selected)
v levelEd.clearSelection()
v levelEd.translateSelectedParts(deltaPos)
v levelEd.linkSelectedJacks()
v Create test level
v data support
v easy wall positioning

2012.08.28 - 2012.08.29
LevelProg: The new programatic level building interface
v refactor from LevelEd and level 10 code.
v startVorp
v test to make sure it works
v improve how key/value pairs are set - no more objIds in tuples.

2012.08.30 - 2012.09.01
Replace the old levels with LevelProg code.
v level 1
  v add wall-chaining API
v level 2
  v fix player-killing code to not use prefabs
    v consolidate sprite template code from transformer and vorp
    v add some kinda sprite-spawning code.
  v delete obsolete sprite logic event handler methods
  v delete LevelBuilder
  v delete Prefabs
  v create and use ToggleSprite
  v streamline part and link creation
v level 3
v level 4
v level 5
v level 6

v Merge year-old vorplogic branch into the main branch!

v Deploy to plexode.

============== VED UI ============

2012.09.08 - 2012.09.08
Access Existing Level Models
v alter py level HTML template to expect a vorpLevels object with one key/value and start Vorp with it.
v alter level.js's to supply vorpLevels = vorpLevels || {}, and vorpLevels['levelX'] = {...}

LevelList
- createLevel
- populate it from siz levels of JSON

Ved UI API:
- iteration for rendering
- spacial queries
  - mouseover
  - drag selection
  - alter selection
- copy selection to a clipboard
- changes
  - paste from a clipboard
  - link
  - delete
  - undo
- previews
  - linking
  - paste preview
  - dragging parts

Ved model for interactive editing
- write invariant-enforcing concequence computer
  - deleting one portal or wall-endpoint deletes the whole cluster
  - other wall endpoint moves minimum distance to remain coaxial
  - deleting any part deletes all jacks and links and data first
  - deleting last part in a cluster deletes cluster

LevEd API II
- levEd.deletedSelectedParts()
- levEd.twistSelectedParts(LEFT90 | RIGHT90 | FLIP_X | FLIP_Y)

