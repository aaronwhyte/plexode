CHORD DEFINITION: EXAMPLES

Needs to work for
- open chords with defined roots
- bar chords with arbitrary roots

G maj: //4 o o o /2 //3
means
 ooo
------
----2-
4----3

The "o" means an open string, which means this is an open chord.
C maj: x //3 /2 o 1 o
x  o o
----1-
--2---
-3----

Here's the format for a form-5 major 7 chord:
maj7 form5: x 1 1/3 12 1/4 1
which means
x
-11111
---2--
--3-4-

Since the 6 string is muted, the form tag "form5" could be inferred.
But lets not do that.  Keep it flexible, so someone could define chords like
G: //4 o o o /2 //3
A: x o /2 /1 /3 o
Am: x o /2 /1 o o
A7: x o /2 o /3 o o


CHORD DEFINITION: TAGS

Tags are the tokens to the left of the colon.
Treat all tags equally for pattern matching.
Allow display hints, for rendering.
Aliasing can work for form tags:
f6 = form6
Aliasing chord names:
M = maj
m = min
M7 = maj7
7 = dom7


SONG SYNTAX

A song looks like this:

Em: Hello world,
Am: I am a measure.
-
B7: So am I. No one understands.

Am: This starts on a new
Em: line
-
B7: This continues on the same line

G# maj7 form6: New line! Lets get
Bb dom7 form5: Jazzy!


CODE

MODEL

ChordDef: A single chord fingering definition. Includes Tokens and Fingering.
SongPart: A part of a song definition: ChordDef, Playable, MeasureBreak, LineBreak
ChordDef: SearchTokens, Fingering, and maybe additional display hints
Song: A list of SongParts

PARSERS

SongParser: Converts a text string into a Song. Splits on "\n" and feeds list to...
SongPartParser: Parses one line of a Song string. Tries LineBreak, MeasureBreak, ChordDef, then Playable.
LineBreakParser: Tries to consume a linebreak
MeasureBreakParser: Same idea.
ChordDefParser: Tries to consume a chord def. If that fails...
PlayableParser: Always works. Unparsable chord tokens converted to lyrics.

SCORING POTENTIAL MATCHES

The tricky part is matching the Playable chord tokens to a ChordDef.
Compute score of all possible tokens, then take highest score's one.
Scoring:
Each token is scored once, using its highest possible score.
A perfect match on a token is 10000 points.
1000 points for a query which is a prefix of a definition token, minus 100 for every unmatched def char.
Completely unmatched definition tokens (no prefix match even) are -10.
Unmatched tokens in the query are -1

So, if the def is "maj7 form6" and the query is "A maj" then the score is...
query's A: no match: -1
query's maj: prefix match: 1000-100 = 900
Leftover def tokens: form6: -10
Total: 889

Always use the highest-scoring match as the actual match.
For autocomplete, order by score. A click will complete prefixes and add missing def tokens,
but it will never remove tokens.


SUPER BASIC UI

Nav links at the top, then text area, then song renders below.

NEXT FEATURES
- Rendered song scroll div occupies all available window space below nav and text area.
- "Maximize song" button.
- Highlight song divs based on source selection
- Auto-scrolling from source selection to song
- Auto-scrolling from song click to source
- Autocomplete menu for chord completion


